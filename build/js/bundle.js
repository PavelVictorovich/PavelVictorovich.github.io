!function(t){function e(o){if(a[o])return a[o].exports;var i=a[o]={exports:{},id:o,loaded:!1};return t[o].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var a={};return e.m=t,e.c=a,e.p="",e(0)}([function(t,e,a){t.exports=a(1)},function(t,e){"use strict";!function(){$.fn.navbar=function(t){var e=$.extend({scrollSpeed:1e3,mySelector:"div"},t),a=[],o=0,i=$(".navbar"),n=$(".navbar a"),s=i.height();if(e.scrollSpeed)var r=e.scrollSpeed;return n.each(function(t){var e=$(this).attr("href");$(this).hasClass("extLink")||$(this).attr("id",e),a.push([$(e).position().top-s,$(e).height()+$(e).position().top,e]);var l=i.offset().top,c=function(o){var n=$(window).scrollTop()+s;n>l+s?(i.addClass("navbar-fixed-top"),$("body").css("padding-top",s)):(i.removeClass("navbar-fixed-top"),$("body").css("padding-top","0")),a[t][0]<=n&&n<=a[t][1]&&("up"==o?($(e).addClass("active"),$(a[t+1][2]).removeClass("active")):t>0?($(e).addClass("active"),$(a[t-1][2]).removeClass("active")):void 0==o&&$(e).addClass("active"),$.each(a,function(t){e!=a[t][2]&&$(a[t][2]).removeClass("active")}))};c(),$(window).scroll(function(){var t=$(this).scrollTop()+s;if(t>o)var e="down";else if(t<o)var e="up";o=t,c(e),$(window).scrollTop()+$(window).height()==$(document).height()?(n.removeClass("active"),$(".navbar a:not('.extLink'):last").addClass("active")):n.last().removeClass("active")}),$(this).on("click",function(t){var e=i.height();t.preventDefault();var a=$(this).attr("href"),o=$(a).offset().top-e;if($("html, body").stop().animate({scrollTop:o},r),$(this).hasClass("extLink"))return!1}),$(".intLink").on("click",function(t){var e=i.height();t.preventDefault();var a=$(this).attr("href");if(i.hasClass("navbar-fixed-top"))var o=$(a).position().top-e;else var o=$(a).position().top-2*e;if($("html","body").stop().animate({scrollTop:o},r),$(this).hasClass("extLink"))return!1})})},$.fn.navbar.defaults={scrollSpeed:1e3,mySelector:"div"}}(jQuery),$(document).ready(function(){$(".navbar").navbar(),$(".nav").on("click","a",function(t){t.preventDefault();var e=$(this).attr("href"),a=$(e).offset().top;$("body","html").animate({scrollTop:a},1e3)}),$(".section, .title-nav").height($(window).height()),$(window).resize(function(){$(".section, .title-nav").height($(window).height())})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,