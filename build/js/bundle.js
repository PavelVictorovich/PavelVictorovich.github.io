!function(t){function a(o){if(e[o])return e[o].exports;var s=e[o]={exports:{},id:o,loaded:!1};return t[o].call(s.exports,s,s.exports,a),s.loaded=!0,s.exports}var e={};return a.m=t,a.c=e,a.p="",a(0)}([function(t,a,e){t.exports=e(1)},function(t,a){"use strict";!function(){$.fn.navbar=function(t){var a=$.extend({scrollSpeed:1e3,mySelector:"div"},t),e=[],o=0,s=$(".navbar").height(),i=$(".navbar"),r=$(".navbar a"),n=i.height();if(a.scrollSpeed)var l=a.scrollSpeed;return r.each(function(t){var a=$(this).attr("href");$(this).hasClass("extLink")||$(this).attr("id",a),e.push([$(a).position().top-s,$(a).height()+$(a).position().top,a]);var c=i.offset().top,v=function(o){var r=$(window).scrollTop()+n;r>c+n?(i.addClass("navbar-fixed-top"),$("body").css("padding-top",s)):(i.removeClass("navbar-fixed-top"),$("body").css("padding-top","0")),e[t][0]<=r&&r<=e[t][1]&&("up"==o?($(a).addClass("active"),$(e[t+1][2]).removeClass("active")):t>0?($(a).addClass("active"),$(e[t-1][2]).removeClass("active")):void 0==o&&$(a).addClass("active"),$.each(e,function(t){a!=e[t][2]&&$(e[t][2]).removeClass("active")}))};v(),$(window).scroll(function(){var t=$(this).scrollTop()+n;if(t>o)var a="down";else if(t<o)var a="up";o=t,v(a),$(window).scrollTop()+$(window).height()==$(document).height()?(r.removeClass("active"),$(".navbar a:not('.extLink'):last").addClass("active")):r.last().removeClass("active")}),$(this).on("click",function(t){var a=i.height();t.preventDefault();var e=$(this).attr("href"),o=$(e).offset().top-a;if($("html, body").stop().animate({scrollTop:o},l),$(this).hasClass("extLink"))return!1}),$(".intLink").on("click",function(t){var a=i.height();t.preventDefault();var e=$(this).attr("href");if(i.hasClass("navbar-fixed-top"))var o=$(e).position().top-a;else var o=$(e).position().top-2*a;if($("html, body").stop().animate({scrollTop:o},l),$(this).hasClass("extLink"))return!1})})},$.fn.navbar.defaults={scrollSpeed:1e3,mySelector:"div"}}(jQuery),$(document).ready(function(){$(".navbar").navbar()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,